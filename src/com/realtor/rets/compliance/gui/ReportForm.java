/*
 * ReportForm.java
 *
 */

package com.realtor.rets.compliance.gui;
import com.realtor.rets.compliance.ExampleFileFilter;
import com.realtor.rets.compliance.TestExecuter;
import com.realtor.rets.compliance.TestReport;
import com.realtor.rets.compliance.TestResult;

import org.realtor.rets.retsapi.RETSConnection;

import javax.swing.*;
import javax.swing.table.TableColumn;
import javax.swing.table.DefaultTableModel;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

/**
 *  This class displays the results of test scripts for the RETS Compliance
 *  Test Platform.
 *
 * @author pobrien
 */
public class ReportForm extends JFrame implements Runnable {
	/**
	    The maximum number of filenames to show in the panel's title bar.
	 */
	private static final int MAX_FILENAME_TITLEBAR_COUNT = 5;

    private DefaultTableModel tableModel = null;
    private int columnCount = 0;
    private HashMap testResultMap = new HashMap();
    private ArrayList reports = new ArrayList();
    private String username;
    private String password;
    private String serverUrl;
    private File fileArray [];
    private String userAgent;
    private String uaPassword;
    private String transLogDir;
    private String resultsDir;

    private JButton jButton2;
    private JScrollPane jScrollPane1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JButton jButton1;
    private JTextField textUserName;
    private JTable jTable1;
    private JTextField textServerUrl;

    private int minimumWidth;
    private int minimumHeight;

    private Client client;

    /** Creates new form ReportForm
     * @param files Test Scripts to run
     * @param username RETS Server user id
     * @param password RETS Server password
     * @param url RETS Server login URL
     * @param useragent User Agent parameter sent to the RETS Server
     * @param logDir Directory to which Transaction Logs are written
     */
    public ReportForm(File files [], String username,
                      String password, String url, String useragent,String uaPassword,
                      String logDir, String resultsDir,
                      Client client) {
        fileArray = files;
        initComponents();
        this.username = username;
        this.password = password;
        this.client = client;
        serverUrl = url;
        Thread t = new Thread(this);
        userAgent = useragent;
        this.resultsDir=resultsDir;
        transLogDir = logDir;
        t.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        jButton1 = new JButton();
        jButton2 = new JButton();
        jLabel1 = new JLabel();
        textServerUrl = new JTextField();
        textUserName = new JTextField();
        jLabel2 = new JLabel();

        getContentPane().setLayout(new BorderLayout());

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        StringBuffer titleBuffer = new StringBuffer("Test Summary Report - ");
        for (int i = 0; i < fileArray.length; i++) {
        	if (i != 0) {
        		titleBuffer.append(", ");
        	}
        	if (i == MAX_FILENAME_TITLEBAR_COUNT) {
        		titleBuffer.append("...");
        		break;
        	}
        	titleBuffer.append(fileArray[i].getName());
        }
        setTitle(titleBuffer.toString());


        // upper-left information panel
        GridBagLayout gbl = new GridBagLayout();
        JPanel infoPanel = new JPanel(gbl);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(4, 4, 4, 4);
        gbc.anchor = GridBagConstraints.WEST;

        gbc.gridwidth = GridBagConstraints.RELATIVE;
        jLabel2.setText("User Name:");
        gbl.setConstraints(jLabel2, gbc);
        infoPanel.add(jLabel2);

        gbc.gridwidth = GridBagConstraints.REMAINDER;
        textUserName.setEditable(false);
        textUserName.setColumns(20);
        gbl.setConstraints(textUserName, gbc);
        infoPanel.add(textUserName);


        gbc.gridwidth = GridBagConstraints.RELATIVE;
        jLabel1.setText("Server URL: ");
        gbl.setConstraints(jLabel1, gbc);
        infoPanel.add(jLabel1);

        gbc.gridwidth = GridBagConstraints.REMAINDER;
        textServerUrl.setEditable(false);
        textServerUrl.setColumns(40);
        infoPanel.add(textServerUrl);


        // upper-right button panel
        JPanel buttonPanel = new JPanel(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(3, 3, 3, 3);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.gridwidth = GridBagConstraints.REMAINDER;

        jButton1.setText("Export to XML File");
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });



        buttonPanel.add(jButton1, gbc);

        // add the infoPanel plus the buttonPanel to the topPanel
        gbl = new GridBagLayout();
        JPanel topPanel = new JPanel(gbl);
        gbc = new GridBagConstraints();

        gbc.weightx = 1.0;
        gbl.setConstraints(infoPanel, gbc);
        topPanel.add(infoPanel);

        gbc.weightx = 4.0;
        gbl.setConstraints(buttonPanel, gbc);
        topPanel.add(buttonPanel);

        // add the topPanel to the top of the content pane
		getContentPane().add(topPanel, BorderLayout.NORTH);


        // center table scroll pane
        jScrollPane1.setViewportView(jTable1);
        jScrollPane1.setPreferredSize(new Dimension(750, 350));
        getContentPane().add(jScrollPane1, BorderLayout.CENTER);

        // add the Close button to the bottom-right
        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        jButton2.setText("Close");
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        bottomPanel.add(jButton2, gbc);
        getContentPane().add(bottomPanel, BorderLayout.SOUTH);




        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                dispose();
            }
        });

        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_NEXT_COLUMN);
        jTable1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });


        pack();
        minimumWidth = getWidth();
        minimumHeight = getHeight();
        addComponentListener(new ComponentSizeListener());
    }


    private void jButton2ActionPerformed(ActionEvent evt) {
        this.dispose();
    }

    /**
     * @param evt  */
    private void jTable1MouseClicked(MouseEvent evt) {
        Integer row = new Integer(jTable1.getSelectedRow());
        TestResult testResult = (TestResult) testResultMap.get(row);
        TestResultDetail trd = new TestResultDetail(testResult);
        trd.show();
    }

    private void jButton1ActionPerformed(ActionEvent evt) {
        PrintWriter writer = null;
        JFileChooser chooser = new JFileChooser();
        ExampleFileFilter filter = new ExampleFileFilter( "xml");
        chooser.addChoosableFileFilter(filter);
        chooser.setCurrentDirectory(new File("/"+this.resultsDir));
        chooser.setSelectedFile( new File(getFileName())); 
        chooser.setDialogTitle("Save to XML file");
        int returnVal = chooser.showSaveDialog(this);
        if (chooser.getSelectedFile() != null){
//            rtx.writeReportXSL(chooser.getSelectedFile().getPath());
            try {
                writer = new PrintWriter(
                        new FileOutputStream(
                            new File(chooser.getSelectedFile().getPath())));
                writer.println("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>");
                writer.println("<TestReport>");
                Iterator itr = reports.iterator();
                while (itr.hasNext())
                {
                    TestReport tReport = (TestReport) itr.next();
                    writer.println(tReport.generateXML());
                    writer.println();
                }
                writer.println("</TestReport>\n");
                writer.close();
            } catch (Exception e) {
                e.printStackTrace();  
            }

            //System.out.println("File selected : "+chooser.getSelectedFile().getPath());
        }

//        ReportToXLS rtx = new ReportToXLS();
//        Iterator itr = reports.iterator();
//        while (itr.hasNext())
//        {
//            TestReport tReport = (TestReport) itr.next();
//            rtx.addReport(tReport);
//        }
//        JFileChooser chooser = new JFileChooser();
//        ExampleFileFilter filter = new ExampleFileFilter( "xls");
//        chooser.addChoosableFileFilter(filter);
//        chooser.setCurrentDirectory(new File("/tmp"));
//        chooser.setDialogTitle("Save to Microsoft Excel (xls) file");
//        int returnVal = chooser.showSaveDialog(this);
//        if (chooser.getSelectedFile() != null){
//            rtx.writeReportXSL(chooser.getSelectedFile().getPath());
//            //System.out.println("File selected : "+chooser.getSelectedFile().getPath());
//        }
//




    }

    /** This allows the addition of new reports, one report is typically added for each
     * Test Script run.
     * @param testReport Test Report to add to the display
     *
     */
    public void addReport(TestReport testReport)
    {
        if (testReport == null ) return;
        reports.add(testReport);
        if (tableModel == null)
        {
            tableModel = new DefaultTableModel();
            tableModel.setColumnIdentifiers(new String [] {"Test Name", "Status", "Description"});

        }
        Collection col = testReport.getTestResults();
        Iterator itr = col.iterator();
        while (itr.hasNext())
        {
            TestResult test = (TestResult) itr.next();
            tableModel.addRow(new String [] {test.getName(),test.getStatus(),test.getDescription()});
            this.testResultMap.put(new Integer(columnCount++), test); // keep track of the testResult so we can use it later.
        }
        jTable1.setModel(tableModel);
        TableColumn tc1 = jTable1.getColumn("Test Name");
        tc1.setMaxWidth(180);
        tc1.setMinWidth(180);
        tc1.setWidth(180);
        TableColumn tc2 = jTable1.getColumn("Status");
        tc2.setMinWidth(79);
        tc2.setMaxWidth(80);

    }
    
    String formatDate(){
    	java.util.Date now = new java.util.Date();
    	SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
        String nowFormat = format.format(now);
        return nowFormat;
    }
    
    String getFileName(){
    	StringBuffer sb = new StringBuffer();
    	URL aURL=null;
    	try {
    		aURL=new URL(this.serverUrl);
    	} catch (Exception e){
    		
    	}
    	String host;
    	if (aURL!=null) {
    		host = aURL.getHost();
    		host=host.replace(".","");
    	} else {
    		host = this.serverUrl.replace(".", "");
        	
    	}
    	String uaClean = this.userAgent.replace("/","").replace(".","");
    	System.out.println("ua "+uaClean);
    	System.out.println("host "+host);
    	sb.append(this.username);
    	sb.append("_");
    	sb.append(uaClean);
    	sb.append("_");
    	sb.append(host);
    	sb.append("_");
    	sb.append("TestReports");
    	sb.append("_");
    	sb.append(formatDate());
    	String fileName=sb.toString();
    	return fileName;
    }

    /** When an object implementing interface <code>Runnable</code> is used
     * to create a thread, starting the thread causes the object's
     * <code>run</code> method to be called in that separately executing
     * thread.
     * <p>
     * The general contract of the method <code>run</code> is that it may
     * take any action whatsoever.
     *
     * @see     java.lang.Thread#run()
     *
     */
    public void run() {
        client.setEnabled(false);
        try {
            runTests();
        }
        finally {
            client.setEnabled(true);
        }
    }

    private void runTests()
    {
        // Add your handling code here:
        textUserName.setText(username);
        textServerUrl.setText(serverUrl);
        TestExecuter te = new TestExecuter();
//        RETSConnection conn = te.loginAction(username,
//                                             password,
//                                             serverUrl);
        RETSConnection conn = te.loginAction(username, password, serverUrl,null,
                                             userAgent, transLogDir, uaPassword);

        StringBuffer sb = new StringBuffer();
        ArrayList al = new ArrayList();

        addReport(te.getLoginReport());
        for (int i = 0; i< fileArray.length;i++)
        {
            TestReport testReport = te.execute(conn, fileArray[i].getAbsolutePath());
            al.add(testReport);
        }
        Iterator itr = al.iterator();
        while (itr.hasNext())
        {
            TestReport tReport = (TestReport) itr.next();
            addReport(tReport);
        }
        this.setLocationRelativeTo(client);
        this.show();
    }

    /**
        ComponentListener implementation to disallow shrinking the dialog size too much.
     */
    private class ComponentSizeListener extends ComponentAdapter {
        public void componentResized(ComponentEvent ev) {
        	int width=getWidth();
        	int height=getHeight();
        	if (width < minimumWidth) {
        		width = minimumWidth;
        	}
        	if (height < minimumHeight) {
        		height = minimumHeight;
        	}
        	setSize(width,height);
        }
    }
}
